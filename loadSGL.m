function [data, param] = loadSGL(filename)
% DESCRIPTION:
%       Function to open and extract the data and parameters from the .sgl
%       data files generated by the Labview PAT scanning system. If a
%       parameter is not encoded in the data set, [] is returned.
%
% EXAMPLE USAGE:
%       [data] = loadSGL(filename)
%       [data, param] = loadSGL(filename)
%
% INPUTS:
%       filename    - full pathname and filename of the data file to open
%
% OUTPUTS:
%       data        - reshaped data set which is arranged data(dx|dy, dt)
%                     for a line scan and data(dx, dy, dt) for an area scan
%       param       - structure containing the following fields:
%
%       Nx          - number of x direction data points
%       Ny          - number of y direction data points
%       Nt          - number of temporal data points
%       dx          - spatial resolution in x direction [m]
%       dy          - spatial resolution in y direction [m]
%       dt          - temporal resolution [s]
%       t0          - array index corresponding to the excitation pulse
%       averages    - number of temporal averages
%       source      - interogation source used, where
%                     0 = Pirelli ITLA
%                     1 = Santec TSL210
%                     2 = Thorlabs ECL5000DT
%       cutoff_freq       - upper cutoff frequency of the data acquisition [Hz]
%       source_wavelength - OPO excitation wavelength
%       mean_pulse_energy - mean pulse energy
%       x0          - absolute x0 [m]
%       y0          - absolute y0 [m]
%       append      - a duplicate copy of the original appended data
%
% ABOUT:
%       author: Bradley E. Treeby
%       date: 6th August 2008
%       last update: 29th June 2015
%       reference: precon3d_bin.m (Edward Zhang 27 June 2008)

% UPDATES:
%       2008/09/23  - added data extraction for fringe tracking parameters
%       2008/10/23  - non-existant parameters now return nan
%       2010/03/11  - change to structure output
%       2010/11/10  - non-existant parameters return blank, added source
%                     types, updated documentation
%       2015/06/29  - auto add .sgl file extension if not given

% data file literals
MAX_NUM_STORED_PARAM = 14;
NUM_PREPEND_PARAM = 6;

if nargin == 0
    % if no filename is given, start an input dialog
    filename = getSGLFilename();
    if isempty(filename)
        error('No file selected...')
    end
else
    % if a filename is given, then check it has a file extension, if not,
    % add one
    [~, ~, file_ext] = fileparts(filename);
    if isempty(file_ext)
        filename = [filename, '.sgl'];
    end
end

% load the data file and catch load errors
h = fopen(filename);
try
    temp = fread(h, 'single', 'ieee-be'); 
catch ME
    error(['Error loading data file: ' ME.message]);
end
fclose(h);

% extract the parameters that prepend the data set (the data within the
% file is stored as: [Nx, Ny, Nt, dx, dy, dt, ....data...., t00, Navg, -,
% fh, lamda, Pe])
N = length(temp);         % total number of data points
param.Nx = temp(1);       % number of x direction data points
param.Ny = temp(2);       % number of y direction data points
param.Nt = temp(3);       % number of temporal data points
param.dx = temp(4);       % spatial resolution in x direction [um]
param.dy = temp(5);       % spatial resolution in y direction [um]
param.dt = temp(6);       % temporal resolution [ns]

% check the loaded file is valid
data_length = param.Nx*param.Ny*param.Nt;
if N > data_length + MAX_NUM_STORED_PARAM
    error('Unknown file type or corrupted data file');
end

% extract the actual data (the length is given by Nx*Ny*Nt)
data = temp(NUM_PREPEND_PARAM + 1:param.Nx*param.Ny*param.Nt + NUM_PREPEND_PARAM);

% reshape the data depending on whether the data file is for an area or
% line scan
if param.Nx ~= 1 && param.Ny ~= 1
    data = reshape(data, param.Nx, param.Ny, param.Nt);
else
    data = reshape(data, param.Nx*param.Ny, param.Nt);
end

% assign empty initial values
param.t0 = [];
param.averages = [];
param.source = [];
param.cutoff_freq = [];
param.source_wavelength = [];
param.mean_pulse_energy = [];
param.x0 = [];
param.y0 = [];

% store a duplicate copy of all the parameters that append the data set
if N > data_length + NUM_PREPEND_PARAM
    param.append = temp(data_length + NUM_PREPEND_PARAM + 1:end);
else
    param.append = [];
end

% extract the individual parameters that append the data set
if N > data_length + NUM_PREPEND_PARAM
    param.t0 = temp(data_length + NUM_PREPEND_PARAM + 1);     % array index corresponding to excitation pulse
end
if N > data_length + NUM_PREPEND_PARAM + 1
    param.averages = temp(data_length + NUM_PREPEND_PARAM + 2);   % number of temporal averages
end
if N > data_length + NUM_PREPEND_PARAM + 2
    param.source = temp(data_length + NUM_PREPEND_PARAM + 3);   % interogation source
end
if N > data_length + NUM_PREPEND_PARAM + 3
    param.cutoff_freq = temp(data_length + NUM_PREPEND_PARAM + 4);     % upper cutoff frequency for the data
end
if N > data_length + NUM_PREPEND_PARAM + 4
    param.source_wavelength = temp(data_length + NUM_PREPEND_PARAM + 5);  % excitation wavelength
end
if N > data_length + NUM_PREPEND_PARAM + 5
    param.mean_pulse_energy = temp(data_length + NUM_PREPEND_PARAM + 6);     % mean pulse energy
end
if N > data_length + NUM_PREPEND_PARAM + 6
    param.x0 = temp(data_length + NUM_PREPEND_PARAM + 7); % absolute x0 
end
if N > data_length + NUM_PREPEND_PARAM + 7
    param.y0 = temp(data_length + NUM_PREPEND_PARAM + 8);  % absolute y0
end

% fix units
param = fixUnits(param);

function param = fixUnits(param)
%FIXUNITSGL     convert param structure fields to SI units
%
% DESCRIPTION:
%       fixunitsSGL converts the fields of the param structure returned by
%       loadSGL to SI units.
%
% EXAMPLE USAGE:
%       param = fixunitsSGL(param)
%
% INPUTS:
%       param       - param structure returned by loadSGL
%
% OUTPUTS:
%       param       - param structure with in SI units
%
% ABOUT:
%       author      - Bradley E. Treeby
%       date        - 11th March 2010
%       last update - 11th March 2010

if ~isempty(param.dx)
    param.dx = param.dx*1e-6;   % um
end

if ~isempty(param.dy)
    param.dy = param.dy*1e-6;   % um
end

if ~isempty(param.dt)
    param.dt = param.dt*1e-9;   % ns
end

if ~isempty(param.cutoff_freq)
    param.cutoff_freq = param.cutoff_freq*1e6;  % MHz
end

if ~isempty(param.source_wavelength)
    param.source_wavelength = param.source_wavelength*1e-9;  % nm
end
    
if ~isempty(param.x0)
    param.x0 = param.x0*1e-3;  % nm
end

if ~isempty(param.y0)
    param.y0 = param.y0*1e-3;  % nm
end
